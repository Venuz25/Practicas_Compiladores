# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,75,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,4,10,53,8,10,11,10,12,10,54,1,10,
        1,10,4,10,59,8,10,11,10,12,10,60,3,10,63,8,10,1,11,1,11,1,12,1,12,
        1,13,4,13,70,8,13,11,13,12,13,71,1,13,1,13,0,0,14,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,3,1,
        0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,78,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,5,33,1,
        0,0,0,7,36,1,0,0,0,9,39,1,0,0,0,11,41,1,0,0,0,13,43,1,0,0,0,15,45,
        1,0,0,0,17,47,1,0,0,0,19,49,1,0,0,0,21,52,1,0,0,0,23,64,1,0,0,0,
        25,66,1,0,0,0,27,69,1,0,0,0,29,30,5,40,0,0,30,2,1,0,0,0,31,32,5,
        41,0,0,32,4,1,0,0,0,33,34,5,38,0,0,34,35,5,38,0,0,35,6,1,0,0,0,36,
        37,5,124,0,0,37,38,5,124,0,0,38,8,1,0,0,0,39,40,5,43,0,0,40,10,1,
        0,0,0,41,42,5,45,0,0,42,12,1,0,0,0,43,44,5,42,0,0,44,14,1,0,0,0,
        45,46,5,47,0,0,46,16,1,0,0,0,47,48,5,37,0,0,48,18,1,0,0,0,49,50,
        5,94,0,0,50,20,1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,54,1,0,0,0,
        54,52,1,0,0,0,54,55,1,0,0,0,55,62,1,0,0,0,56,58,5,46,0,0,57,59,7,
        0,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,
        63,1,0,0,0,62,56,1,0,0,0,62,63,1,0,0,0,63,22,1,0,0,0,64,65,2,48,
        49,0,65,24,1,0,0,0,66,67,7,1,0,0,67,26,1,0,0,0,68,70,7,2,0,0,69,
        68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,
        0,73,74,6,13,0,0,74,28,1,0,0,0,5,0,54,60,62,71,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    AND = 3
    OR = 4
    MAS = 5
    MENOS = 6
    MULT = 7
    DIV = 8
    MOD = 9
    POW = 10
    NUM = 11
    BOOL = 12
    VAR = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'&&'", "'||'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'^'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "MAS", "MENOS", "MULT", "DIV", "MOD", "POW", "NUM", 
            "BOOL", "VAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "AND", "OR", "MAS", "MENOS", "MULT", "DIV", 
                  "MOD", "POW", "NUM", "BOOL", "VAR", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


